{"version":3,"sources":["components/gifCard/GifCard.js","giphyApp.js","serviceWorker.js","index.js"],"names":["gifCard","props","className","style","display","src","gif","img_url","alt","title","keyword","App","useState","search","gifState","setGifState","handleSearch","event","console","log","preventDefault","axios","get","then","gifs","data","forEach","gifData","images","original","url","newSearch","JSON","parse","stringify","push","catch","err","error","handleInputChange","target","name","value","type","onChange","onClick","map","GifCard","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"2MAceA,EAZC,SAAAC,GACd,OACE,yBAAKC,UAAU,gBAAgBC,MAAO,CAAEC,QAAS,iBAC/C,yBAAKC,IAAKJ,EAAMK,IAAIC,QAASL,UAAU,eAAeM,IAAI,QAC1D,yBAAKN,UAAU,aACb,wBAAIA,UAAU,cAAcD,EAAMK,IAAIG,OACtC,uBAAGP,UAAU,aAAa,iBAAmBD,EAAMK,IAAII,Y,iBC+ChDC,EAnDH,WAAO,IAAD,EAEgBC,mBAAS,CACvCF,QAAS,GACTG,OAAQ,KAJM,mBAETC,EAFS,KAECC,EAFD,KAsCd,OA/BFD,EAASE,aAAe,SAAAC,GACtBC,QAAQC,IAAIL,EAASJ,SACrBO,EAAMG,iBACNC,IAAMC,IAAN,gDAAmDR,EAASJ,QAA5D,sDACGa,MAAK,YAAmB,IAEnBC,EAFkB,EAAPC,KAECA,KAEhBP,QAAQC,IAAI,mBAAoBK,GAE/BA,EAAKE,SAAQ,SAAApB,GAEZ,IAAIqB,EAAU,CACZjB,QAASI,EAASJ,QAClBD,MAAOH,EAAIG,MACXF,QAASD,EAAIsB,OAAOC,SAASC,KAG1BC,EAAYC,KAAKC,MAAMD,KAAKE,UAAUpB,EAASD,SACnDkB,EAAUI,KAAKR,GACfZ,EAAY,2BAAKD,GAAN,IAAgBD,OAAQkB,EAAWrB,QAAS,YAK3D0B,OAAM,SAAAC,GAAG,OAAInB,QAAQoB,MAAMD,OAGhCvB,EAASyB,kBAAoB,SAAAtB,GAC3BF,EAAY,2BAAKD,GAAN,kBAAiBG,EAAMuB,OAAOC,KAAOxB,EAAMuB,OAAOE,UAG3D,oCACE,2BAAOC,KAAK,OAAOF,KAAK,UAAUG,SAAU9B,EAASyB,oBACrD,4BAAQM,QAAS/B,EAASE,cAA1B,oBACA,4BAEIF,EAASD,OAAOiC,KAAI,SAAAxC,GAAG,OAAI,kBAACyC,EAAD,CAASzC,IAAKA,UCpCjC0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEd1B,OAAM,SAAAE,GACLpB,QAAQoB,MAAMA,EAAMyB,c","file":"static/js/main.26c3932d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst gifCard = props => {\r\n  return (\r\n    <div className=\"card col-md-4\" style={{ display: \"inline-block\" }}>\r\n      <img src={props.gif.img_url} className=\"card-img-top\" alt=\"...\" />\r\n      <div className=\"card-body\">\r\n        <h5 className=\"card-title\">{props.gif.title}</h5>\r\n        <p className=\"card-text\">{'Searched For: ' + props.gif.keyword}</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default gifCard","import React, { useState, useEffect } from 'react';\r\nimport GifCard from './components/gifCard'\r\nimport axios from 'axios'\r\n\r\nconst App = () => {\r\n\r\n  const [gifState, setGifState] = useState({\r\n    keyword: '',\r\n    search: []\r\n  })\r\n\r\n  gifState.handleSearch = event => {\r\n    console.log(gifState.keyword)\r\n    event.preventDefault()\r\n    axios.get(`http://api.giphy.com/v1/gifs/search?q=${gifState.keyword}&api_key=f3lKJ52za9QKZQIXqSu3zXNo5Q1r34ag&limit=1`)\r\n      .then(function ({data}) {\r\n        \r\n        let gifs = data.data\r\n         \r\n        console.log(\"success got data\", gifs);\r\n         \r\n         gifs.forEach(gif => {\r\n           \r\n          let gifData = {\r\n            keyword: gifState.keyword,\r\n            title: gif.title,\r\n            img_url: gif.images.original.url\r\n           }\r\n\r\n           let newSearch = JSON.parse(JSON.stringify(gifState.search))\r\n           newSearch.push(gifData)\r\n           setGifState({ ...gifState, search: newSearch, keyword: '' })\r\n      \r\n          });\r\n      \r\n        })\r\n      .catch(err => console.error(err))\r\n  }\r\n\r\n  gifState.handleInputChange = event => {\r\n    setGifState({ ...gifState, [event.target.name]: event.target.value })\r\n  }\r\n    return(\r\n      <>\r\n        <input type=\"text\" name=\"keyword\" onChange={gifState.handleInputChange}/>\r\n        <button onClick={gifState.handleSearch}>Search for Gif's</button>\r\n        <ul>\r\n          {\r\n            gifState.search.map(gif => <GifCard gif={gif} />)\r\n          } \r\n        </ul>\r\n      </>\r\n    )\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './giphyApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}